KCPSM3 Assembler log file for program 'lb3pico.psm'.
Generated by KCPSM3 version 1.30
Ken Chapman (Xilinx Ltd) 2005.
28Feb2021-24:49:03

 Addr Code

 000                        ; KCPSM3 Program - Practice Picoblaze on Spartan-3A Starter Kit.
 000                        ;
 000                        ;
 000                        ;
 000                        ;
 000                        ; The 8 LEDs provide a simple 'heart beat' counter driven by interrupts generated at
 000                        ; one second intervals.
 000                        ;
 000                        ;
 000                        ;**************************************************************************************
 000                        ; Port definitions
 000                        ;**************************************************************************************
 000                        ;
 000                        ;
 000                        ;
 000                        CONSTANT LED_port, 80               ;8 simple LEDs. Is an OUTPUT port.
 000                        CONSTANT DATA_IN_PORT, 00           ;input data port. this is an INPUT port.
 000                        CONSTANT led0, 40
 000                        ;**************************************************************************************
 000                        ; Special Register usage
 000                        ;**************************************************************************************
 000                        ;
 000                        ; No registers are given special names in this program.
 000                        ;
 000                        ;**************************************************************************************
 000                        ; Scratch Pad Memory Locations
 000                        ;**************************************************************************************
 000                        ;
 000                        ;
 000                        CONSTANT ISR_preserve_s0, 00        ;Preserve s0 contents during ISR
 000                        CONSTANT ISR_preserve_s1, 01        ;Preserve s1 contents during ISR
 000                        CONSTANT ISR_preserve_s2, 02        ;Preserve s2 contents during ISR
 000                        CONSTANT ISR_preserve_s3, 03        ;Preserve s3 contents during ISR
 000                        CONSTANT ISR_preserve_s4, 04        ;Preserve s3 contents during ISR
 000                        CONSTANT ISR_preserve_s5, 05        ;Preserve s3 contents during ISR
 000                        CONSTANT counter, 06                ;counts down from 255 to 0
 000                        CONSTANT addition, 07               ;LSB of accumulator
 000                        ;
 000                        CONSTANT addition2, 08              ;MSB of accumulator
 000                        ;
 000                        ;**************************************************************************************
 000                        ; Useful data constants
 000                        ;**************************************************************************************
 000                        ;
 000                        ;
 000                        ; Constant to define a software delay of 1us. This must be adjusted to reflect the
 000                        ; clock applied to KCPSM3. Every instruction executes in 2 clock cycles making the
 000                        ; calculation highly predictable. The '6' in the following equation even allows for
 000                        ; 'CALL delay_1us' instruction in the initiating code.
 000                        ;
 000                        ; delay_1us_constant =  (clock_rate - 6)/4       Where 'clock_rate' is in MHz
 000                        ;
 000                        ; Example: For a 50MHz clock the constant value is (50-6)/4 = 11  (0B Hex).
 000                        ; For clock rates below 10MHz the value of 1 must be used and the operation will
 000                        ; become lower than intended. Interrupts may effect the timing of software based
 000                        ; delays.
 000                        ;
 000                        CONSTANT delay_1us_constant, 0B
 000                        ;
 000                        ;
 000                        ;
 000                        ; ASCII table
 000                        ;
 000                        CONSTANT character_a, 61
 000                        CONSTANT character_b, 62
 000                        CONSTANT character_c, 63
 000                        CONSTANT character_d, 64
 000                        CONSTANT character_e, 65
 000                        CONSTANT character_f, 66
 000                        CONSTANT character_g, 67
 000                        CONSTANT character_h, 68
 000                        CONSTANT character_i, 69
 000                        CONSTANT character_j, 6A
 000                        CONSTANT character_k, 6B
 000                        CONSTANT character_l, 6C
 000                        CONSTANT character_m, 6D
 000                        CONSTANT character_n, 6E
 000                        CONSTANT character_o, 6F
 000                        CONSTANT character_p, 70
 000                        CONSTANT character_q, 71
 000                        CONSTANT character_r, 72
 000                        CONSTANT character_s, 73
 000                        CONSTANT character_t, 74
 000                        CONSTANT character_u, 75
 000                        CONSTANT character_v, 76
 000                        CONSTANT character_w, 77
 000                        CONSTANT character_x, 78
 000                        CONSTANT character_y, 79
 000                        CONSTANT character_z, 7A
 000                        CONSTANT character_A, 41
 000                        CONSTANT character_B, 42
 000                        CONSTANT character_C, 43
 000                        CONSTANT character_D, 44
 000                        CONSTANT character_E, 45
 000                        CONSTANT character_F, 46
 000                        CONSTANT character_G, 47
 000                        CONSTANT character_H, 48
 000                        CONSTANT character_I, 49
 000                        CONSTANT character_J, 4A
 000                        CONSTANT character_K, 4B
 000                        CONSTANT character_L, 4C
 000                        CONSTANT character_M, 4D
 000                        CONSTANT character_N, 4E
 000                        CONSTANT character_O, 4F
 000                        CONSTANT character_P, 50
 000                        CONSTANT character_Q, 51
 000                        CONSTANT character_R, 52
 000                        CONSTANT character_S, 53
 000                        CONSTANT character_T, 54
 000                        CONSTANT character_U, 55
 000                        CONSTANT character_V, 56
 000                        CONSTANT character_W, 57
 000                        CONSTANT character_X, 58
 000                        CONSTANT character_Y, 59
 000                        CONSTANT character_Z, 5A
 000                        CONSTANT character_0, 30
 000                        CONSTANT character_1, 31
 000                        CONSTANT character_2, 32
 000                        CONSTANT character_3, 33
 000                        CONSTANT character_4, 34
 000                        CONSTANT character_5, 35
 000                        CONSTANT character_6, 36
 000                        CONSTANT character_7, 37
 000                        CONSTANT character_8, 38
 000                        CONSTANT character_9, 39
 000                        CONSTANT character_colon, 3A
 000                        CONSTANT character_stop, 2E
 000                        CONSTANT character_semi_colon, 3B
 000                        CONSTANT character_minus, 2D
 000                        CONSTANT character_divide, 2F       ;'/'
 000                        CONSTANT character_plus, 2B
 000                        CONSTANT character_comma, 2C
 000                        CONSTANT character_less_than, 3C
 000                        CONSTANT character_greater_than, 3E
 000                        CONSTANT character_equals, 3D
 000                        CONSTANT character_space, 20
 000                        CONSTANT character_CR, 0D           ;carriage return
 000                        CONSTANT character_question, 3F     ;'?'
 000                        CONSTANT character_dollar, 24
 000                        CONSTANT character_exclaim, 21      ;'!'
 000                        CONSTANT character_BS, 08           ;Back Space command character
 000                        ;
 000                        ;
 000                        ;
 000                        ;
 000                        ;
 000                        ;**************************************************************************************
 000                        ; Initialise the system
 000                        ;**************************************************************************************
 000                        ;
 000  00000     cold_start: LOAD s0, 00                         ;clear 1 second counter and clear LEDs
 001                        ;STORE s0, LED_port
 001  2C080                 OUTPUT s0, LED_port[80]
 002                        ;
 002  3C001                 ENABLE INTERRUPT                    ;enable one second heart beat
 003                        ;**************************************************************************************
 003                        ; Main program
 003                        ;**************************************************************************************
 003                        ;
 003                        ; Display welcome message for design
 003                        ;
 003  30022   main_program: CALL delay_1s[022]                  ;toggle on
 004  00601                 LOAD s6, 01                         ;  used a register than is not in use by ISR
 005  2C640                 OUTPUT s6, led0[40]
 006                        ;wait 1 second
 006  30022                 CALL delay_1s[022]                  ; toggle every second
 007  00600                 LOAD s6, 00                         ;  turn off
 008  2C640                 OUTPUT s6, led0[40]
 009  34003                 JUMP main_program[003]              ;
 00A                        ;**************************************************************************************
 00A                        ; Software delay routines
 00A                        ;**************************************************************************************
 00A                        ;
 00A                        ; Delay of 1us.
 00A                        ;
 00A                        ; Constant value 'delay_1us_constant' reflects the clock applied to KCPSM3. Every
 00A                        ; instruction executes in 2 clock cycles making the calculation highly predictable.
 00A                        ; The '6' in the following equation allows for the 'CALL delay_1us' instruction used
 00A                        ; in the initiating code. Interrupts may effect software derived delays.
 00A                        ;
 00A                        ; delay_1us_constant =  (clock_rate - 6)/4       Where 'clock_rate' is in MHz
 00A                        ;
 00A                        ; Registers used s0
 00A                        ;
 00A  0000B      delay_1us: LOAD s0, delay_1us_constant[0B]
 00B  1C001       wait_1us: SUB s0, 01
 00C  3540B                 JUMP NZ, wait_1us[00B]
 00D  2A000                 RETURN
 00E                        ;
 00E                        ; Delay of 40us.
 00E                        ;
 00E                        ; Registers used s0, s1
 00E                        ;
 00E  00128     delay_40us: LOAD s1, 28                         ;40 x 1us = 40us
 00F  3000A      wait_40us: CALL delay_1us[00A]
 010  1C101                 SUB s1, 01
 011  3540F                 JUMP NZ, wait_40us[00F]
 012  2A000                 RETURN
 013                        ;
 013                        ;
 013                        ; Delay of 1ms.
 013                        ;
 013                        ; Registers used s0, s1, s2
 013                        ;
 013  00219      delay_1ms: LOAD s2, 19                         ;25 x 40us = 1ms
 014  3000E       wait_1ms: CALL delay_40us[00E]
 015  1C201                 SUB s2, 01
 016  35414                 JUMP NZ, wait_1ms[014]
 017  2A000                 RETURN
 018                        ;
 018                        ; Delay of 20ms.
 018                        ;
 018                        ; Delay of 20ms used during initialisation.
 018                        ;
 018                        ; Registers used s0, s1, s2, s3
 018                        ;
 018  00314     delay_20ms: LOAD s3, 14                         ;20 x 1ms = 20ms
 019  30013      wait_20ms: CALL delay_1ms[013]
 01A  1C301                 SUB s3, 01
 01B  35419                 JUMP NZ, wait_20ms[019]
 01C  2A000                 RETURN
 01D  00364    delay_100ms: LOAD s3, 64                         ;100 x 1ms = 20ms
 01E  30013     wait_100ms: CALL delay_1ms[013]
 01F  1C301                 SUB s3, 01
 020  3541E                 JUMP NZ, wait_100ms[01E]
 021  2A000                 RETURN
 022                        ;
 022                        ; Delay of approximately 1 second.
 022                        ;
 022                        ; Registers used s0, s1, s2, s3, s4
 022                        ;
 022  00432       delay_1s: LOAD s4, 32                         ;50 x 20ms = 1000ms
 023  30018        wait_1s: CALL delay_20ms[018]
 024  1C401                 SUB s4, 01
 025  35423                 JUMP NZ, wait_1s[023]
 026  2A000                 RETURN
 027                        ;
 027                        ;
 027                        ;
 027                        ;**************************************************************************************
 027                        ; Interrupt Service Routine (ISR)
 027                        ;**************************************************************************************
 027                        ;
 027                        ; The interrupt is used purely to provide a 1 second heart beat binary counter pattern
 027                        ; on the 8 LEDs.
 027                        ;gave myself 5 registers to use during ISR
 027  2E000            ISR: STORE s0, ISR_preserve_s0[00]       ;preserve register  //input value of new data in s0
 028  2E101                 STORE s1, ISR_preserve_s1[01]       ;preserve register  //new value in s1
 029  2E202                 STORE s2, ISR_preserve_s2[02]       ;preserve register
 02A  2E303                 STORE s3, ISR_preserve_s3[03]       ;preserve register
 02B  2E404                 STORE s4, ISR_preserve_s4[04]       ;preserve register
 02C  2E505                 STORE s5, ISR_preserve_s5[05]       ;preserve register  // counter for 256
 02D  06506                 FETCH s5, counter[06]
 02E  06107                 FETCH s1, addition[07]
 02F  06208                 FETCH s2, addition2[08]
 030                        ;JUMP countdown
 030  04000                 INPUT s0, DATA_IN_PORT[00]
 031  12080                 TEST s0, 80
 032  35434                 JUMP NZ, 2scompliment[034]
 033  34037                 JUMP additionstep[037]
 034  0E0FF   2scompliment: XOR s0, FF                          ;; Xoring the bits of s0 to find 2s compliment
 035  18001                 ADD s0, 01                          ;; Add 1 to finish finding 2's compliment
 036  34037                 JUMP additionstep[037]
 037          additionstep: 
 037  19100                 ADD s1, s0
 038  1A200                 ADDCY s2, 00
 039  3403A                 JUMP inccount[03A]
 03A  145FF       inccount: COMPARE s5, FF
 03B  3503E                 JUMP Z, displayresult[03E]
 03C  18501                 ADD s5, 01
 03D  34066                 JUMP ISR_done[066]
 03E         displayresult: 
 03E  12280                 TEST s2, 80
 03F  35043                 JUMP Z, SIX[043]
 040  003FF                 LOAD s3, FF
 041  2C380                 OUTPUT s3, LED_port[80]
 042  34070                 JUMP restart[070]
 043                   SIX: 
 043  12240                 TEST s2, 40
 044  35048                 JUMP Z, FIVE[048]
 045  003FE                 LOAD s3, FE
 046  2C380                 OUTPUT s3, LED_port[80]
 047  34070                 JUMP restart[070]
 048                  FIVE: 
 048  12220                 TEST s2, 20
 049  3504D                 JUMP Z, FOUR[04D]
 04A  003FC                 LOAD s3, FC
 04B  2C380                 OUTPUT s3, LED_port[80]
 04C  34070                 JUMP restart[070]
 04D                  FOUR: 
 04D  12210                 TEST s2, 10
 04E  35052                 JUMP Z, THREE[052]
 04F  003F8                 LOAD s3, F8
 050  2C380                 OUTPUT s3, LED_port[80]
 051  34070                 JUMP restart[070]
 052                 THREE: 
 052  12208                 TEST s2, 08
 053  35057                 JUMP Z, TWO[057]
 054  003F0                 LOAD s3, F0
 055  2C380                 OUTPUT s3, LED_port[80]
 056  34070                 JUMP restart[070]
 057                   TWO: 
 057  12204                 TEST s2, 04
 058  3505C                 JUMP Z, ONE[05C]
 059  003E0                 LOAD s3, E0
 05A  2C380                 OUTPUT s3, LED_port[80]
 05B  34070                 JUMP restart[070]
 05C                   ONE: 
 05C  12202                 TEST s2, 02
 05D  35061                 JUMP Z, ZERO[061]
 05E  003C0                 LOAD s3, C0
 05F  2C380                 OUTPUT s3, LED_port[80]
 060  34070                 JUMP restart[070]
 061                  ZERO: 
 061  12201                 TEST s2, 01
 062  35066                 JUMP Z, ISR_done[066]
 063  00380                 LOAD s3, 80
 064  2C380                 OUTPUT s3, LED_port[80]
 065  34070                 JUMP restart[070]
 066              ISR_done: 
 066  2E506                 STORE s5, counter[06]
 067  2E107                 STORE s1, addition[07]
 068  2E208                 STORE s2, addition2[08]
 069  06000                 FETCH s0, ISR_preserve_s0[00]       ;restore register
 06A  06101                 FETCH s1, ISR_preserve_s1[01]       ;restore register
 06B  06202                 FETCH s2, ISR_preserve_s2[02]       ;restore register
 06C  06303                 FETCH s3, ISR_preserve_s3[03]       ;restore register
 06D  06404                 FETCH s4, ISR_preserve_s4[04]       ;restore register
 06E  06505                 FETCH s5, ISR_preserve_s5[05]       ;restore register
 06F  38001                 RETURNI ENABLE                      ; RETURNI ENABLE determines the future ability of interrupt
 070               restart: 
 070  00300                 LOAD s3, 00                         ;; doing the process 256 times
 071  2E306                 STORE s3, counter[06]
 072  2E307                 STORE s3, addition[07]
 073  2E308                 STORE s3, addition2[08]
 074  34066                 JUMP ISR_done[066]
 075                        ;
 075                        ;
 075                        ;**************************************************************************************
 075                        ; Interrupt Vector
 075                        ;**************************************************************************************
 075                        ;
 3FF                        ADDRESS 3FF
 3FF  34027                 JUMP ISR[027]
 3FF                        ;
 3FF                        ;
